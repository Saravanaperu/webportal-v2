#!/bin/bash

# A fully automated script to deploy the full-stack trading bot application on Ubuntu.
#
# USAGE:
#   sudo ./deploy.sh your_domain_or_ip.com
#
# This script performs a first-time setup and can be re-run safely.
# It must be run with sudo privileges from the project root directory.

# --- Configuration ---
DB_NAME="tradingbotdb"
DB_USER="tradingbotuser"
APP_NAME="trading-bot" # Used for Nginx config and pm2 process name

# --- Script Setup ---
# Exit immediately if a command exits with a non-zero status.
set -e

# 1. Validate Script Execution
echo "--- 1. Validating Execution ---"
if [ "$EUID" -ne 0 ]; then
  echo "Error: Please run this script with sudo."
  exit 1
fi
if [ -z "$1" ]; then
  echo "Error: Missing argument. Usage: sudo $0 <your_domain_or_ip>"
  exit 1
fi
SERVER_NAME=$1
APP_PATH=$(pwd)
echo "Deployment will be configured for server name: $SERVER_NAME"
echo "Application path detected as: $APP_PATH"
echo ""

# --- 2. System-Wide Installation ---
echo "--- 2. Installing System-Wide Dependencies ---"
apt-get update
apt-get install -y nodejs npm nginx postgresql postgresql-contrib
npm install pm2 -g
npm install dotenv-cli -g
echo "All system dependencies are installed."
echo ""

# --- 3. First-Time Database and .env Setup ---
# This block only runs if the .env file does not already exist.
if [ ! -f "backend/.env" ]; then
  echo "--- 3. Performing First-Time Database and .env Setup ---"
  DB_PASS=$(openssl rand -hex 12)

  # Create PostgreSQL user and database if they don't exist
  if ! sudo -u postgres psql -t -c '\du' | cut -d \| -f 1 | grep -qw "$DB_USER"; then
      sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';"
      echo "PostgreSQL user '$DB_USER' created."
  fi
  if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
      sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
      echo "PostgreSQL database '$DB_NAME' created."
  fi

  # Create the .env file for the backend
  echo "Creating .env file with new database credentials..."
  DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}"
  JWT_SECRET=$(openssl rand -hex 32)
  cat > backend/.env << EOF
# Auto-generated by deploy.sh
DATABASE_URL="${DATABASE_URL}"
JWT_SECRET="${JWT_SECRET}"

# IMPORTANT: Please add your Angel One credentials below
ANGEL_API_KEY=""
ANGEL_CLIENT_CODE=""
ANGEL_PASSWORD=""
ANGEL_TOTP=""
EOF
  echo "IMPORTANT: .env file created in 'backend/'. You MUST add your Angel One credentials to it."
  echo ""
else
  echo "--- 3. Skipping Database and .env Setup (.env file already exists) ---"
  echo ""
fi

# --- 4. Backend Deployment ---
echo "--- 4. Deploying Backend ---"

echo "Installing backend npm dependencies..."
npm install --prefix backend

echo "Running database migrations..."
dotenv -e backend/.env -- npx prisma migrate deploy --schema=backend/prisma/schema.prisma

echo "Starting/restarting backend server with pm2..."
pm2 restart "$APP_NAME-backend" || pm2 start backend/src/server.js --name "$APP_NAME-backend"
pm2 save # Save current process list
pm2 startup # Ensure pm2 starts on system boot

echo "Backend deployment complete."
echo ""

# --- 5. Frontend Deployment ---
echo "--- 5. Deploying Frontend ---"
echo "Installing frontend npm dependencies..."
npm install
echo "Building the React app for production..."
npm run build
echo "Frontend build complete."
echo ""

# --- 6. Nginx Configuration ---
echo "--- 6. Configuring Nginx ---"
NGINX_CONFIG_PATH="/etc/nginx/sites-available/$APP_NAME"
echo "Creating Nginx configuration at $NGINX_CONFIG_PATH..."

# Copy the template and replace placeholders
cp nginx.conf $NGINX_CONFIG_PATH
sed -i "s|your_domain.com|$SERVER_NAME|g" $NGINX_CONFIG_PATH
sed -i "s|/path/to/your/app/dist|$APP_PATH/dist|g" $NGINX_CONFIG_PATH

echo "Enabling Nginx site..."
# Remove default site if it exists to avoid conflicts
if [ -L "/etc/nginx/sites-enabled/default" ]; then rm /etc/nginx/sites-enabled/default; fi
# Create symlink to enable our site config
ln -sf $NGINX_CONFIG_PATH /etc/nginx/sites-enabled/

echo "Testing and restarting Nginx..."
nginx -t
systemctl restart nginx

echo ""
echo "--- Deployment Finished Successfully! ---"
echo "Your application should now be accessible at: http://$SERVER_NAME"
echo "IMPORTANT: Remember to edit 'backend/.env' to add your Angel One credentials."
